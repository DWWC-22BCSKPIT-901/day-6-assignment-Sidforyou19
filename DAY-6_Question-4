#include <iostream>
#include <algorithm>
#include <climits>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode* left, TreeNode* right) : val(x), left(left), right(right) {}
};

class Solution {
public:
    int maxPathSum(TreeNode* root) {
        int globalMax = INT_MIN; 
        maxGain(root, globalMax);
        return globalMax;
    }

private:
    int maxGain(TreeNode* node, int& globalMax) {
        if (node == nullptr) {
            return 0; 
        }

        int leftGain = max(maxGain(node->left, globalMax), 0); 
        int rightGain = max(maxGain(node->right, globalMax), 0);

        int currentPathSum = node->val + leftGain + rightGain;

        globalMax = max(globalMax, currentPathSum);

        return node->val + max(leftGain, rightGain);
    }
};

int main() {
    TreeNode* root1 = new TreeNode(1, new TreeNode(2), new TreeNode(3));
    Solution solution;
    cout << "Maximum Path Sum: " << solution.maxPathSum(root1) << endl; 

    TreeNode* root2 = new TreeNode(-10, 
                                   new TreeNode(9), 
                                   new TreeNode(20, new TreeNode(15), new TreeNode(7)));
    cout << "Maximum Path Sum: " << solution.maxPathSum(root2) << endl; 

    return 0;
}
